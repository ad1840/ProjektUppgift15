
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010f4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  000810f4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017c  20070438  0008152c  00010438  2**2
                  ALLOC
  3 .stack        00002004  200705b4  000816a8  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a197  00000000  00000000  000104d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b68  00000000  00000000  0001a669  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002ef9  00000000  00000000  0001c1d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006f8  00000000  00000000  0001f0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005d8  00000000  00000000  0001f7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000446e  00000000  00000000  0001fd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009a3a  00000000  00000000  00024208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005f59a  00000000  00000000  0002dc42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000dcc  00000000  00000000  0008d1dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725b8 	.word	0x200725b8
   80004:	00080b59 	.word	0x00080b59
   80008:	00080b55 	.word	0x00080b55
   8000c:	00080b55 	.word	0x00080b55
   80010:	00080b55 	.word	0x00080b55
   80014:	00080b55 	.word	0x00080b55
   80018:	00080b55 	.word	0x00080b55
	...
   8002c:	00080b55 	.word	0x00080b55
   80030:	00080b55 	.word	0x00080b55
   80034:	00000000 	.word	0x00000000
   80038:	00080b55 	.word	0x00080b55
   8003c:	00080b55 	.word	0x00080b55
   80040:	00080b55 	.word	0x00080b55
   80044:	00080b55 	.word	0x00080b55
   80048:	00080b55 	.word	0x00080b55
   8004c:	00080b55 	.word	0x00080b55
   80050:	00080b55 	.word	0x00080b55
   80054:	00080b55 	.word	0x00080b55
   80058:	00080b55 	.word	0x00080b55
   8005c:	00080b55 	.word	0x00080b55
   80060:	00080b55 	.word	0x00080b55
   80064:	00080b55 	.word	0x00080b55
   80068:	00000000 	.word	0x00000000
   8006c:	00080921 	.word	0x00080921
   80070:	0008093d 	.word	0x0008093d
   80074:	00080959 	.word	0x00080959
   80078:	00080975 	.word	0x00080975
	...
   80084:	00080b55 	.word	0x00080b55
   80088:	00080b55 	.word	0x00080b55
   8008c:	00080b55 	.word	0x00080b55
   80090:	00080b55 	.word	0x00080b55
   80094:	00080b55 	.word	0x00080b55
   80098:	00080b55 	.word	0x00080b55
   8009c:	00080b55 	.word	0x00080b55
   800a0:	00080b55 	.word	0x00080b55
   800a4:	00000000 	.word	0x00000000
   800a8:	00080b55 	.word	0x00080b55
   800ac:	00080b55 	.word	0x00080b55
   800b0:	00080b55 	.word	0x00080b55
   800b4:	00080b55 	.word	0x00080b55
   800b8:	00080b55 	.word	0x00080b55
   800bc:	00080b55 	.word	0x00080b55
   800c0:	00080b55 	.word	0x00080b55
   800c4:	00080b55 	.word	0x00080b55
   800c8:	00080b55 	.word	0x00080b55
   800cc:	00080b55 	.word	0x00080b55
   800d0:	00080b55 	.word	0x00080b55
   800d4:	00080b55 	.word	0x00080b55
   800d8:	00080b55 	.word	0x00080b55
   800dc:	00080b55 	.word	0x00080b55
   800e0:	00080b55 	.word	0x00080b55
   800e4:	00080b55 	.word	0x00080b55
   800e8:	00080b55 	.word	0x00080b55
   800ec:	00080b55 	.word	0x00080b55
   800f0:	00080b55 	.word	0x00080b55

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	000810f4 	.word	0x000810f4
   80110:	000810f7 	.word	0x000810f7
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	000810f4 	.word	0x000810f4
   8013c:	000810f4 	.word	0x000810f4
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070438 	.word	0x20070438
   80164:	00000000 	.word	0x00000000
   80168:	000810f4 	.word	0x000810f4

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	000810f4 	.word	0x000810f4
   80198:	2007043c 	.word	0x2007043c
   8019c:	000810f4 	.word	0x000810f4
   801a0:	00000000 	.word	0x00000000

000801a4 <setupPWM>:
pwm_channel_t pwm_pin8_instance;
pwm_channel_t pwm_pin9_instance;
pwm_channel_t pwm_pin34_instance;
pwm_channel_t pwm_pin36_instance;

void setupPWM(void){
   801a4:	b500      	push	{lr}
   801a6:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   801a8:	f04f 0024 	mov.w	r0, #36	; 0x24
   801ac:	f640 23d1 	movw	r3, #2769	; 0xad1
   801b0:	f2c0 0308 	movt	r3, #8
   801b4:	4798      	blx	r3
	
	
	pwm_clock_t clock_setting = {
   801b6:	f244 2040 	movw	r0, #16960	; 0x4240
   801ba:	f2c0 000f 	movt	r0, #15
   801be:	9001      	str	r0, [sp, #4]
   801c0:	f04f 0100 	mov.w	r1, #0
   801c4:	9102      	str	r1, [sp, #8]
   801c6:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
   801ca:	f2c0 5201 	movt	r2, #1281	; 0x501
   801ce:	9203      	str	r2, [sp, #12]
		.ul_clka = 1000 * 1000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   801d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   801d4:	f2c4 0009 	movt	r0, #16393	; 0x4009
   801d8:	a901      	add	r1, sp, #4
   801da:	f240 3379 	movw	r3, #889	; 0x379
   801de:	f2c0 0308 	movt	r3, #8
   801e2:	4798      	blx	r3
	
	
}
   801e4:	b005      	add	sp, #20
   801e6:	bd00      	pop	{pc}

000801e8 <enablePWMPin6>:
void enablePWMPin6(void){
   801e8:	b538      	push	{r3, r4, r5, lr}
	//PWM on Arduino pin 6
	pwm_channel_disable(PWM, PWM_CHANNEL_7);
   801ea:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   801ee:	f2c4 0409 	movt	r4, #16393	; 0x4009
   801f2:	4620      	mov	r0, r4
   801f4:	f04f 0107 	mov.w	r1, #7
   801f8:	f240 43f9 	movw	r3, #1273	; 0x4f9
   801fc:	f2c0 0308 	movt	r3, #8
   80200:	4798      	blx	r3
	pwm_pin6_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80202:	f240 518c 	movw	r1, #1420	; 0x58c
   80206:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8020a:	f04f 000b 	mov.w	r0, #11
   8020e:	6048      	str	r0, [r1, #4]
	pwm_pin6_instance.ul_period = 100;
   80210:	f04f 0264 	mov.w	r2, #100	; 0x64
   80214:	610a      	str	r2, [r1, #16]
	pwm_pin6_instance.ul_duty = 100;
   80216:	60ca      	str	r2, [r1, #12]
	pwm_pin6_instance.channel = PWM_CHANNEL_7;
   80218:	f04f 0507 	mov.w	r5, #7
   8021c:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_pin6_instance);
   8021e:	4620      	mov	r0, r4
   80220:	f240 33c5 	movw	r3, #965	; 0x3c5
   80224:	f2c0 0308 	movt	r3, #8
   80228:	4798      	blx	r3
	pio_set_peripheral(PIOC, PIO_PERIPH_B, PIO_PC24B_PWML7);
   8022a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8022e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80232:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80236:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8023a:	f240 632d 	movw	r3, #1581	; 0x62d
   8023e:	f2c0 0308 	movt	r3, #8
   80242:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_7);
   80244:	4620      	mov	r0, r4
   80246:	4629      	mov	r1, r5
   80248:	f240 42ed 	movw	r2, #1261	; 0x4ed
   8024c:	f2c0 0208 	movt	r2, #8
   80250:	4790      	blx	r2
   80252:	bd38      	pop	{r3, r4, r5, pc}

00080254 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80254:	b4f0      	push	{r4, r5, r6, r7}
   80256:	b08c      	sub	sp, #48	; 0x30
   80258:	4606      	mov	r6, r0
   8025a:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   8025c:	ac01      	add	r4, sp, #4
   8025e:	f241 059c 	movw	r5, #4252	; 0x109c
   80262:	f2c0 0508 	movt	r5, #8
   80266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8026e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80276:	9b01      	ldr	r3, [sp, #4]
   80278:	fbb7 f0f3 	udiv	r0, r7, r3
   8027c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80280:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80284:	d952      	bls.n	8032c <pwm_clocks_generate+0xd8>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80286:	9902      	ldr	r1, [sp, #8]
   80288:	fbb7 f2f1 	udiv	r2, r7, r1
   8028c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80290:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80294:	d94d      	bls.n	80332 <pwm_clocks_generate+0xde>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80296:	9b03      	ldr	r3, [sp, #12]
   80298:	fbb7 f0f3 	udiv	r0, r7, r3
   8029c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   802a4:	d948      	bls.n	80338 <pwm_clocks_generate+0xe4>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   802a6:	9904      	ldr	r1, [sp, #16]
   802a8:	fbb7 f2f1 	udiv	r2, r7, r1
   802ac:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   802b4:	d943      	bls.n	8033e <pwm_clocks_generate+0xea>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   802b6:	9b05      	ldr	r3, [sp, #20]
   802b8:	fbb7 f0f3 	udiv	r0, r7, r3
   802bc:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802c0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   802c4:	d93e      	bls.n	80344 <pwm_clocks_generate+0xf0>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   802c6:	9906      	ldr	r1, [sp, #24]
   802c8:	fbb7 f2f1 	udiv	r2, r7, r1
   802cc:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   802d4:	d939      	bls.n	8034a <pwm_clocks_generate+0xf6>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   802d6:	9b07      	ldr	r3, [sp, #28]
   802d8:	fbb7 f0f3 	udiv	r0, r7, r3
   802dc:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802e0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   802e4:	d934      	bls.n	80350 <pwm_clocks_generate+0xfc>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   802e6:	9908      	ldr	r1, [sp, #32]
   802e8:	fbb7 f2f1 	udiv	r2, r7, r1
   802ec:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   802f4:	d92f      	bls.n	80356 <pwm_clocks_generate+0x102>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   802f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   802f8:	fbb7 f0f3 	udiv	r0, r7, r3
   802fc:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80300:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80304:	d92a      	bls.n	8035c <pwm_clocks_generate+0x108>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80306:	990a      	ldr	r1, [sp, #40]	; 0x28
   80308:	fbb7 f2f1 	udiv	r2, r7, r1
   8030c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80310:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80314:	d925      	bls.n	80362 <pwm_clocks_generate+0x10e>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80318:	fbb7 f0f3 	udiv	r0, r7, r3
   8031c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80320:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80324:	d920      	bls.n	80368 <pwm_clocks_generate+0x114>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80326:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8032a:	e021      	b.n	80370 <pwm_clocks_generate+0x11c>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8032c:	f04f 0200 	mov.w	r2, #0
   80330:	e01c      	b.n	8036c <pwm_clocks_generate+0x118>
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
			break;
		}
		ul_pre++;
   80332:	f04f 0201 	mov.w	r2, #1
   80336:	e019      	b.n	8036c <pwm_clocks_generate+0x118>
   80338:	f04f 0202 	mov.w	r2, #2
   8033c:	e016      	b.n	8036c <pwm_clocks_generate+0x118>
   8033e:	f04f 0203 	mov.w	r2, #3
   80342:	e013      	b.n	8036c <pwm_clocks_generate+0x118>
   80344:	f04f 0204 	mov.w	r2, #4
   80348:	e010      	b.n	8036c <pwm_clocks_generate+0x118>
   8034a:	f04f 0205 	mov.w	r2, #5
   8034e:	e00d      	b.n	8036c <pwm_clocks_generate+0x118>
   80350:	f04f 0206 	mov.w	r2, #6
   80354:	e00a      	b.n	8036c <pwm_clocks_generate+0x118>
   80356:	f04f 0207 	mov.w	r2, #7
   8035a:	e007      	b.n	8036c <pwm_clocks_generate+0x118>
   8035c:	f04f 0208 	mov.w	r2, #8
   80360:	e004      	b.n	8036c <pwm_clocks_generate+0x118>
   80362:	f04f 0209 	mov.w	r2, #9
   80366:	e001      	b.n	8036c <pwm_clocks_generate+0x118>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80368:	f04f 020a 	mov.w	r2, #10
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   8036c:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   80370:	b00c      	add	sp, #48	; 0x30
   80372:	bcf0      	pop	{r4, r5, r6, r7}
   80374:	4770      	bx	lr
   80376:	bf00      	nop

00080378 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80378:	b570      	push	{r4, r5, r6, lr}
   8037a:	4606      	mov	r6, r0
   8037c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8037e:	6808      	ldr	r0, [r1, #0]
   80380:	b158      	cbz	r0, 8039a <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80382:	6889      	ldr	r1, [r1, #8]
   80384:	f240 2355 	movw	r3, #597	; 0x255
   80388:	f2c0 0308 	movt	r3, #8
   8038c:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   8038e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   80392:	4288      	cmp	r0, r1
   80394:	d014      	beq.n	803c0 <pwm_init+0x48>
			return result;
		}

		clock = result;
   80396:	4605      	mov	r5, r0
   80398:	e001      	b.n	8039e <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   8039a:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   8039e:	6860      	ldr	r0, [r4, #4]
   803a0:	b158      	cbz	r0, 803ba <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   803a2:	68a1      	ldr	r1, [r4, #8]
   803a4:	f240 2255 	movw	r2, #597	; 0x255
   803a8:	f2c0 0208 	movt	r2, #8
   803ac:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   803ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   803b2:	4298      	cmp	r0, r3
   803b4:	d004      	beq.n	803c0 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   803b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   803ba:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   803bc:	f04f 0000 	mov.w	r0, #0
}
   803c0:	bd70      	pop	{r4, r5, r6, pc}
   803c2:	bf00      	nop

000803c4 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   803c4:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   803c6:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   803c8:	8a8d      	ldrh	r5, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803ca:	684a      	ldr	r2, [r1, #4]
   803cc:	f002 040f 	and.w	r4, r2, #15
   803d0:	4325      	orrs	r5, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   803d2:	890e      	ldrh	r6, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   803d4:	4335      	orrs	r5, r6
   803d6:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   803d8:	ea45 2542 	orr.w	r5, r5, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   803dc:	7d8c      	ldrb	r4, [r1, #22]
   803de:	ea45 4604 	orr.w	r6, r5, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   803e2:	7dca      	ldrb	r2, [r1, #23]
   803e4:	ea46 4542 	orr.w	r5, r6, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   803e8:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803ea:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   803ee:	f103 0210 	add.w	r2, r3, #16
   803f2:	ea4f 1542 	mov.w	r5, r2, lsl #5
   803f6:	1944      	adds	r4, r0, r5
   803f8:	5146      	str	r6, [r0, r5]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   803fa:	68ce      	ldr	r6, [r1, #12]
   803fc:	6066      	str	r6, [r4, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   803fe:	690a      	ldr	r2, [r1, #16]
   80400:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   80404:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80408:	7d8c      	ldrb	r4, [r1, #22]
   8040a:	b13c      	cbz	r4, 8041c <pwm_channel_init+0x58>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8040c:	8b8e      	ldrh	r6, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8040e:	8b4a      	ldrh	r2, [r1, #26]
   80410:	ea42 4506 	orr.w	r5, r2, r6, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80414:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   80418:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8041c:	6c85      	ldr	r5, [r0, #72]	; 0x48
   8041e:	f04f 1601 	mov.w	r6, #65537	; 0x10001
   80422:	fa06 f603 	lsl.w	r6, r6, r3
   80426:	ea6f 0206 	mvn.w	r2, r6
   8042a:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   8042c:	7fce      	ldrb	r6, [r1, #31]
   8042e:	fa06 f603 	lsl.w	r6, r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80432:	7f8c      	ldrb	r4, [r1, #30]
   80434:	fa04 f403 	lsl.w	r4, r4, r3
   80438:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8043c:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   8043e:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80440:	6c45      	ldr	r5, [r0, #68]	; 0x44
   80442:	402a      	ands	r2, r5
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80444:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80448:	fa05 f503 	lsl.w	r5, r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   8044c:	f891 4020 	ldrb.w	r4, [r1, #32]
   80450:	fa04 f403 	lsl.w	r4, r4, r3
   80454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80458:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   8045a:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   8045c:	f04f 0201 	mov.w	r2, #1
   80460:	fa02 f203 	lsl.w	r2, r2, r3
	if (p_channel->b_sync_ch) {
   80464:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80468:	b11c      	cbz	r4, 80472 <pwm_channel_init+0xae>
		p_pwm->PWM_SCM |= channel;
   8046a:	6a04      	ldr	r4, [r0, #32]
   8046c:	4314      	orrs	r4, r2
   8046e:	6204      	str	r4, [r0, #32]
   80470:	e003      	b.n	8047a <pwm_channel_init+0xb6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80472:	6a04      	ldr	r4, [r0, #32]
   80474:	ea24 0402 	bic.w	r4, r4, r2
   80478:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8047a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8047e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80480:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80482:	bf0c      	ite	eq
   80484:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80486:	4394      	bicne	r4, r2
   80488:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   8048a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8048e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80490:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80492:	bf0c      	ite	eq
   80494:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80498:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   8049c:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   8049e:	2b03      	cmp	r3, #3
   804a0:	d80f      	bhi.n	804c2 <pwm_channel_init+0xfe>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   804a2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   804a4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   804a8:	f04f 02ff 	mov.w	r2, #255	; 0xff
   804ac:	fa02 f203 	lsl.w	r2, r2, r3
   804b0:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   804b4:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   804b8:	fa01 f303 	lsl.w	r3, r1, r3
   804bc:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   804be:	66c2      	str	r2, [r0, #108]	; 0x6c
   804c0:	e010      	b.n	804e4 <pwm_channel_init+0x120>
	} else {
		ch_num -= 4;
   804c2:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   804c6:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   804c8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   804cc:	f04f 02ff 	mov.w	r2, #255	; 0xff
   804d0:	fa02 f203 	lsl.w	r2, r2, r3
   804d4:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   804d8:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   804dc:	fa01 f303 	lsl.w	r3, r1, r3
   804e0:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   804e2:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   804e4:	f04f 0000 	mov.w	r0, #0
   804e8:	bc70      	pop	{r4, r5, r6}
   804ea:	4770      	bx	lr

000804ec <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   804ec:	f04f 0301 	mov.w	r3, #1
   804f0:	fa03 f101 	lsl.w	r1, r3, r1
   804f4:	6041      	str	r1, [r0, #4]
   804f6:	4770      	bx	lr

000804f8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   804f8:	f04f 0301 	mov.w	r3, #1
   804fc:	fa03 f101 	lsl.w	r1, r3, r1
   80500:	6081      	str	r1, [r0, #8]
   80502:	4770      	bx	lr

00080504 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80504:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80506:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   8050a:	f2c0 5001 	movt	r0, #1281	; 0x501
   8050e:	f640 6359 	movw	r3, #3673	; 0xe59
   80512:	f2c0 0308 	movt	r3, #8
   80516:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80518:	f04f 0000 	mov.w	r0, #0
   8051c:	f04f 013e 	mov.w	r1, #62	; 0x3e
   80520:	f640 2231 	movw	r2, #2609	; 0xa31
   80524:	f2c0 0208 	movt	r2, #8
   80528:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8052a:	f640 24a1 	movw	r4, #2721	; 0xaa1
   8052e:	f2c0 0408 	movt	r4, #8
   80532:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80534:	2800      	cmp	r0, #0
   80536:	d0fc      	beq.n	80532 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80538:	f640 20b1 	movw	r0, #2737	; 0xab1
   8053c:	f2c0 0008 	movt	r0, #8
   80540:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80542:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80546:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8054a:	f643 7301 	movw	r3, #16129	; 0x3f01
   8054e:	f2c2 030d 	movt	r3, #8205	; 0x200d
   80552:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80554:	f640 24c1 	movw	r4, #2753	; 0xac1
   80558:	f2c0 0408 	movt	r4, #8
   8055c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8055e:	2800      	cmp	r0, #0
   80560:	d0fc      	beq.n	8055c <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80562:	f04f 0010 	mov.w	r0, #16
   80566:	f640 1291 	movw	r2, #2449	; 0x991
   8056a:	f2c0 0208 	movt	r2, #8
   8056e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80570:	f640 4091 	movw	r0, #3217	; 0xc91
   80574:	f2c0 0008 	movt	r0, #8
   80578:	4780      	blx	r0
   8057a:	bd10      	pop	{r4, pc}

0008057c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8057c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8057e:	f641 2350 	movw	r3, #6736	; 0x1a50
   80582:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80586:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8058a:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8058c:	f04f 000b 	mov.w	r0, #11
   80590:	f640 24d1 	movw	r4, #2769	; 0xad1
   80594:	f2c0 0408 	movt	r4, #8
   80598:	47a0      	blx	r4
   8059a:	f04f 000c 	mov.w	r0, #12
   8059e:	47a0      	blx	r4
   805a0:	f04f 000d 	mov.w	r0, #13
   805a4:	47a0      	blx	r4
   805a6:	f04f 000e 	mov.w	r0, #14
   805aa:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   805ac:	f04f 003b 	mov.w	r0, #59	; 0x3b
   805b0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805b4:	f240 7405 	movw	r4, #1797	; 0x705
   805b8:	f2c0 0408 	movt	r4, #8
   805bc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   805be:	f04f 0055 	mov.w	r0, #85	; 0x55
   805c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805c6:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   805c8:	f04f 0056 	mov.w	r0, #86	; 0x56
   805cc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805d0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   805d2:	f04f 0068 	mov.w	r0, #104	; 0x68
   805d6:	f04f 0179 	mov.w	r1, #121	; 0x79
   805da:	f6c2 0100 	movt	r1, #10240	; 0x2800
   805de:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   805e0:	f04f 005c 	mov.w	r0, #92	; 0x5c
   805e4:	f04f 0101 	mov.w	r1, #1
   805e8:	f6c2 0100 	movt	r1, #10240	; 0x2800
   805ec:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   805ee:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   805f2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   805f6:	f44f 7140 	mov.w	r1, #768	; 0x300
   805fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   805fe:	f640 0305 	movw	r3, #2053	; 0x805
   80602:	f2c0 0308 	movt	r3, #8
   80606:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80608:	f04f 002b 	mov.w	r0, #43	; 0x2b
   8060c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80610:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80612:	f04f 002a 	mov.w	r0, #42	; 0x2a
   80616:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8061a:	47a0      	blx	r4
   8061c:	bd10      	pop	{r4, pc}
   8061e:	bf00      	nop

00080620 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80620:	b10a      	cbz	r2, 80626 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   80622:	6641      	str	r1, [r0, #100]	; 0x64
   80624:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80626:	6601      	str	r1, [r0, #96]	; 0x60
   80628:	4770      	bx	lr
   8062a:	bf00      	nop

0008062c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8062c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8062e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80632:	d016      	beq.n	80662 <pio_set_peripheral+0x36>
   80634:	d804      	bhi.n	80640 <pio_set_peripheral+0x14>
   80636:	b1c9      	cbz	r1, 8066c <pio_set_peripheral+0x40>
   80638:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8063c:	d115      	bne.n	8066a <pio_set_peripheral+0x3e>
   8063e:	e009      	b.n	80654 <pio_set_peripheral+0x28>
   80640:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80644:	d012      	beq.n	8066c <pio_set_peripheral+0x40>
   80646:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8064a:	d00f      	beq.n	8066c <pio_set_peripheral+0x40>
   8064c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80650:	d10b      	bne.n	8066a <pio_set_peripheral+0x3e>
   80652:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80654:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80656:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80658:	400b      	ands	r3, r1
   8065a:	ea23 0302 	bic.w	r3, r3, r2
   8065e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80660:	e003      	b.n	8066a <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80662:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80664:	ea42 0103 	orr.w	r1, r2, r3
   80668:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8066a:	6042      	str	r2, [r0, #4]
   8066c:	4770      	bx	lr
   8066e:	bf00      	nop

00080670 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80670:	6441      	str	r1, [r0, #68]	; 0x44
   80672:	4770      	bx	lr

00080674 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80676:	4604      	mov	r4, r0
   80678:	460d      	mov	r5, r1
   8067a:	4616      	mov	r6, r2
   8067c:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   8067e:	f240 6371 	movw	r3, #1649	; 0x671
   80682:	f2c0 0308 	movt	r3, #8
   80686:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80688:	4620      	mov	r0, r4
   8068a:	4629      	mov	r1, r5
   8068c:	9a06      	ldr	r2, [sp, #24]
   8068e:	f240 6321 	movw	r3, #1569	; 0x621
   80692:	f2c0 0308 	movt	r3, #8
   80696:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80698:	b10f      	cbz	r7, 8069e <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   8069a:	6525      	str	r5, [r4, #80]	; 0x50
   8069c:	e000      	b.n	806a0 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8069e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   806a0:	b10e      	cbz	r6, 806a6 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   806a2:	6325      	str	r5, [r4, #48]	; 0x30
   806a4:	e000      	b.n	806a8 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   806a6:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   806a8:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   806aa:	6025      	str	r5, [r4, #0]
   806ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806ae:	bf00      	nop

000806b0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   806b0:	b570      	push	{r4, r5, r6, lr}
   806b2:	4604      	mov	r4, r0
   806b4:	460d      	mov	r5, r1
   806b6:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   806b8:	f240 6371 	movw	r3, #1649	; 0x671
   806bc:	f2c0 0308 	movt	r3, #8
   806c0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   806c2:	4620      	mov	r0, r4
   806c4:	4629      	mov	r1, r5
   806c6:	f006 0201 	and.w	r2, r6, #1
   806ca:	f240 6321 	movw	r3, #1569	; 0x621
   806ce:	f2c0 0308 	movt	r3, #8
   806d2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   806d4:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   806d8:	bf14      	ite	ne
   806da:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   806dc:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   806de:	f016 0f02 	tst.w	r6, #2
   806e2:	d002      	beq.n	806ea <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   806e4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   806e8:	e004      	b.n	806f4 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   806ea:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   806ee:	bf18      	it	ne
   806f0:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   806f4:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   806f6:	6025      	str	r5, [r4, #0]
   806f8:	bd70      	pop	{r4, r5, r6, pc}
   806fa:	bf00      	nop

000806fc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   806fc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   806fe:	4770      	bx	lr

00080700 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80700:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80702:	4770      	bx	lr

00080704 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80704:	b5f0      	push	{r4, r5, r6, r7, lr}
   80706:	b083      	sub	sp, #12
   80708:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8070a:	ea4f 1650 	mov.w	r6, r0, lsr #5
   8070e:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   80712:	f201 7207 	addw	r2, r1, #1799	; 0x707
   80716:	ea4f 2642 	mov.w	r6, r2, lsl #9
#endif

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8071a:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   8071e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80722:	d042      	beq.n	807aa <pio_configure_pin+0xa6>
   80724:	d806      	bhi.n	80734 <pio_configure_pin+0x30>
   80726:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8072a:	d00a      	beq.n	80742 <pio_configure_pin+0x3e>
   8072c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80730:	d164      	bne.n	807fc <pio_configure_pin+0xf8>
   80732:	e020      	b.n	80776 <pio_configure_pin+0x72>
   80734:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80738:	d046      	beq.n	807c8 <pio_configure_pin+0xc4>
   8073a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8073e:	d15d      	bne.n	807fc <pio_configure_pin+0xf8>
   80740:	e042      	b.n	807c8 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80742:	f000 071f 	and.w	r7, r0, #31
   80746:	f04f 0401 	mov.w	r4, #1
   8074a:	fa04 f707 	lsl.w	r7, r4, r7
   8074e:	4630      	mov	r0, r6
   80750:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80754:	463a      	mov	r2, r7
   80756:	f240 632d 	movw	r3, #1581	; 0x62d
   8075a:	f2c0 0308 	movt	r3, #8
   8075e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80760:	4630      	mov	r0, r6
   80762:	4639      	mov	r1, r7
   80764:	ea05 0204 	and.w	r2, r5, r4
   80768:	f240 6321 	movw	r3, #1569	; 0x621
   8076c:	f2c0 0308 	movt	r3, #8
   80770:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80772:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80774:	e044      	b.n	80800 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80776:	f000 001f 	and.w	r0, r0, #31
   8077a:	f04f 0401 	mov.w	r4, #1
   8077e:	fa04 f700 	lsl.w	r7, r4, r0
   80782:	4630      	mov	r0, r6
   80784:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80788:	463a      	mov	r2, r7
   8078a:	f240 632d 	movw	r3, #1581	; 0x62d
   8078e:	f2c0 0308 	movt	r3, #8
   80792:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80794:	4630      	mov	r0, r6
   80796:	4639      	mov	r1, r7
   80798:	ea05 0204 	and.w	r2, r5, r4
   8079c:	f240 6321 	movw	r3, #1569	; 0x621
   807a0:	f2c0 0308 	movt	r3, #8
   807a4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   807a6:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   807a8:	e02a      	b.n	80800 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   807aa:	f000 021f 	and.w	r2, r0, #31
   807ae:	f04f 0401 	mov.w	r4, #1
   807b2:	4630      	mov	r0, r6
   807b4:	fa04 f102 	lsl.w	r1, r4, r2
   807b8:	462a      	mov	r2, r5
   807ba:	f240 63b1 	movw	r3, #1713	; 0x6b1
   807be:	f2c0 0308 	movt	r3, #8
   807c2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   807c4:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   807c6:	e01b      	b.n	80800 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   807c8:	f000 021f 	and.w	r2, r0, #31
   807cc:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   807d0:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   807d4:	ea05 0104 	and.w	r1, r5, r4
   807d8:	9100      	str	r1, [sp, #0]
   807da:	4630      	mov	r0, r6
   807dc:	fa04 f102 	lsl.w	r1, r4, r2
   807e0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   807e4:	bf14      	ite	ne
   807e6:	2200      	movne	r2, #0
   807e8:	2201      	moveq	r2, #1
   807ea:	f3c5 0380 	ubfx	r3, r5, #2, #1
   807ee:	f240 6575 	movw	r5, #1653	; 0x675
   807f2:	f2c0 0508 	movt	r5, #8
   807f6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   807f8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   807fa:	e001      	b.n	80800 <pio_configure_pin+0xfc>

	default:
		return 0;
   807fc:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80800:	b003      	add	sp, #12
   80802:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080804 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80804:	b5f0      	push	{r4, r5, r6, r7, lr}
   80806:	b083      	sub	sp, #12
   80808:	4607      	mov	r7, r0
   8080a:	460e      	mov	r6, r1
   8080c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8080e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80812:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80816:	d036      	beq.n	80886 <pio_configure_pin_group+0x82>
   80818:	d806      	bhi.n	80828 <pio_configure_pin_group+0x24>
   8081a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8081e:	d00a      	beq.n	80836 <pio_configure_pin_group+0x32>
   80820:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80824:	d14d      	bne.n	808c2 <pio_configure_pin_group+0xbe>
   80826:	e01a      	b.n	8085e <pio_configure_pin_group+0x5a>
   80828:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8082c:	d033      	beq.n	80896 <pio_configure_pin_group+0x92>
   8082e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80832:	d146      	bne.n	808c2 <pio_configure_pin_group+0xbe>
   80834:	e02f      	b.n	80896 <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80836:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8083a:	4632      	mov	r2, r6
   8083c:	f240 632d 	movw	r3, #1581	; 0x62d
   80840:	f2c0 0308 	movt	r3, #8
   80844:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80846:	4638      	mov	r0, r7
   80848:	4631      	mov	r1, r6
   8084a:	f005 0201 	and.w	r2, r5, #1
   8084e:	f240 6321 	movw	r3, #1569	; 0x621
   80852:	f2c0 0308 	movt	r3, #8
   80856:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80858:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   8085c:	e033      	b.n	808c6 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8085e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80862:	4632      	mov	r2, r6
   80864:	f240 632d 	movw	r3, #1581	; 0x62d
   80868:	f2c0 0308 	movt	r3, #8
   8086c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8086e:	4638      	mov	r0, r7
   80870:	4631      	mov	r1, r6
   80872:	f005 0201 	and.w	r2, r5, #1
   80876:	f240 6321 	movw	r3, #1569	; 0x621
   8087a:	f2c0 0308 	movt	r3, #8
   8087e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80880:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80884:	e01f      	b.n	808c6 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80886:	f240 63b1 	movw	r3, #1713	; 0x6b1
   8088a:	f2c0 0308 	movt	r3, #8
   8088e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80890:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80894:	e017      	b.n	808c6 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80896:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8089a:	f005 0001 	and.w	r0, r5, #1
   8089e:	9000      	str	r0, [sp, #0]
   808a0:	4638      	mov	r0, r7
   808a2:	4631      	mov	r1, r6
   808a4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   808a8:	bf14      	ite	ne
   808aa:	2200      	movne	r2, #0
   808ac:	2201      	moveq	r2, #1
   808ae:	f3c5 0380 	ubfx	r3, r5, #2, #1
   808b2:	f240 6475 	movw	r4, #1653	; 0x675
   808b6:	f2c0 0408 	movt	r4, #8
   808ba:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   808bc:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   808c0:	e001      	b.n	808c6 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   808c2:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   808c6:	b003      	add	sp, #12
   808c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   808ca:	bf00      	nop

000808cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   808cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   808ce:	4604      	mov	r4, r0
   808d0:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   808d2:	f240 63fd 	movw	r3, #1789	; 0x6fd
   808d6:	f2c0 0308 	movt	r3, #8
   808da:	4798      	blx	r3
   808dc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   808de:	4620      	mov	r0, r4
   808e0:	f240 7101 	movw	r1, #1793	; 0x701
   808e4:	f2c0 0108 	movt	r1, #8
   808e8:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   808ea:	4005      	ands	r5, r0
   808ec:	d014      	beq.n	80918 <pio_handler_process+0x4c>
   808ee:	4c0b      	ldr	r4, [pc, #44]	; (8091c <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   808f0:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   808f2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   808f6:	42b0      	cmp	r0, r6
   808f8:	d10a      	bne.n	80910 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   808fa:	f854 1c08 	ldr.w	r1, [r4, #-8]
   808fe:	4229      	tst	r1, r5
   80900:	d006      	beq.n	80910 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80902:	6822      	ldr	r2, [r4, #0]
   80904:	4630      	mov	r0, r6
   80906:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80908:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8090c:	ea25 0503 	bic.w	r5, r5, r3
   80910:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80914:	2d00      	cmp	r5, #0
   80916:	d1eb      	bne.n	808f0 <pio_handler_process+0x24>
   80918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8091a:	bf00      	nop
   8091c:	20070460 	.word	0x20070460

00080920 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80920:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80922:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80926:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8092a:	f04f 010b 	mov.w	r1, #11
   8092e:	f640 03cd 	movw	r3, #2253	; 0x8cd
   80932:	f2c0 0308 	movt	r3, #8
   80936:	4798      	blx	r3
   80938:	bd08      	pop	{r3, pc}
   8093a:	bf00      	nop

0008093c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8093c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8093e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80942:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80946:	f04f 010c 	mov.w	r1, #12
   8094a:	f640 03cd 	movw	r3, #2253	; 0x8cd
   8094e:	f2c0 0308 	movt	r3, #8
   80952:	4798      	blx	r3
   80954:	bd08      	pop	{r3, pc}
   80956:	bf00      	nop

00080958 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80958:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8095a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8095e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80962:	f04f 010d 	mov.w	r1, #13
   80966:	f640 03cd 	movw	r3, #2253	; 0x8cd
   8096a:	f2c0 0308 	movt	r3, #8
   8096e:	4798      	blx	r3
   80970:	bd08      	pop	{r3, pc}
   80972:	bf00      	nop

00080974 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80974:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80976:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   8097a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8097e:	f04f 010e 	mov.w	r1, #14
   80982:	f640 03cd 	movw	r3, #2253	; 0x8cd
   80986:	f2c0 0308 	movt	r3, #8
   8098a:	4798      	blx	r3
   8098c:	bd08      	pop	{r3, pc}
   8098e:	bf00      	nop

00080990 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80990:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80994:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8099a:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8099e:	4308      	orrs	r0, r1
   809a0:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
   809a4:	f010 0f08 	tst.w	r0, #8
   809a8:	d007      	beq.n	809ba <pmc_switch_mck_to_pllack+0x2a>
   809aa:	e010      	b.n	809ce <pmc_switch_mck_to_pllack+0x3e>
   809ac:	f100 33ff 	add.w	r3, r0, #4294967295
   809b0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   809b2:	f010 0f08 	tst.w	r0, #8
   809b6:	d038      	beq.n	80a2a <pmc_switch_mck_to_pllack+0x9a>
   809b8:	e009      	b.n	809ce <pmc_switch_mck_to_pllack+0x3e>
   809ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
   809be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   809c2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   809c6:	6e91      	ldr	r1, [r2, #104]	; 0x68
   809c8:	f011 0f08 	tst.w	r1, #8
   809cc:	d0ee      	beq.n	809ac <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   809ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   809d2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   809d6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   809d8:	f022 0303 	bic.w	r3, r2, #3
   809dc:	f043 0002 	orr.w	r0, r3, #2
   809e0:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809e2:	6e89      	ldr	r1, [r1, #104]	; 0x68
   809e4:	f011 0f08 	tst.w	r1, #8
   809e8:	d009      	beq.n	809fe <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   809ea:	f04f 0000 	mov.w	r0, #0
   809ee:	4770      	bx	lr
   809f0:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809f4:	6e91      	ldr	r1, [r2, #104]	; 0x68
   809f6:	f011 0f08 	tst.w	r1, #8
   809fa:	d013      	beq.n	80a24 <pmc_switch_mck_to_pllack+0x94>
   809fc:	e009      	b.n	80a12 <pmc_switch_mck_to_pllack+0x82>
   809fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a02:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80a06:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80a0a:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80a0c:	f010 0f08 	tst.w	r0, #8
   80a10:	d0ee      	beq.n	809f0 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80a12:	f04f 0000 	mov.w	r0, #0
   80a16:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80a18:	f04f 0001 	mov.w	r0, #1
   80a1c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80a1e:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80a22:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a24:	3b01      	subs	r3, #1
   80a26:	d1f0      	bne.n	80a0a <pmc_switch_mck_to_pllack+0x7a>
   80a28:	e7f9      	b.n	80a1e <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a2a:	1e58      	subs	r0, r3, #1
   80a2c:	d1cb      	bne.n	809c6 <pmc_switch_mck_to_pllack+0x36>
   80a2e:	e7f3      	b.n	80a18 <pmc_switch_mck_to_pllack+0x88>

00080a30 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80a30:	b188      	cbz	r0, 80a56 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80a32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80a36:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80a3a:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80a3c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80a40:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80a44:	4002      	ands	r2, r0
   80a46:	f04f 0302 	mov.w	r3, #2
   80a4a:	f2c0 1337 	movt	r3, #311	; 0x137
   80a4e:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80a52:	6208      	str	r0, [r1, #32]
   80a54:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80a56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80a5a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80a5e:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80a60:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80a64:	f020 0203 	bic.w	r2, r0, #3
   80a68:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80a6c:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80a70:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80a74:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80a78:	6218      	str	r0, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80a7a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80a7e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80a82:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80a84:	f013 0f01 	tst.w	r3, #1
   80a88:	d0fb      	beq.n	80a82 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80a8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80a8e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80a92:	6a08      	ldr	r0, [r1, #32]
   80a94:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80a98:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80a9c:	620b      	str	r3, [r1, #32]
   80a9e:	4770      	bx	lr

00080aa0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80aa0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80aa4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80aa8:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80aaa:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80aae:	4770      	bx	lr

00080ab0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80ab0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80ab4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ab8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80abc:	629a      	str	r2, [r3, #40]	; 0x28
   80abe:	4770      	bx	lr

00080ac0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80ac0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80ac4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ac8:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80aca:	f000 0002 	and.w	r0, r0, #2
   80ace:	4770      	bx	lr

00080ad0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80ad0:	282c      	cmp	r0, #44	; 0x2c
   80ad2:	d835      	bhi.n	80b40 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   80ad4:	281f      	cmp	r0, #31
   80ad6:	d817      	bhi.n	80b08 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80ad8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80adc:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80ae0:	698a      	ldr	r2, [r1, #24]
   80ae2:	f04f 0301 	mov.w	r3, #1
   80ae6:	fa03 f300 	lsl.w	r3, r3, r0
   80aea:	401a      	ands	r2, r3
   80aec:	4293      	cmp	r3, r2
   80aee:	d02a      	beq.n	80b46 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   80af0:	f04f 0101 	mov.w	r1, #1
   80af4:	fa01 f000 	lsl.w	r0, r1, r0
   80af8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80afc:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80b00:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80b02:	f04f 0000 	mov.w	r0, #0
   80b06:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80b08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b0c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b10:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   80b14:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80b18:	f04f 0101 	mov.w	r1, #1
   80b1c:	fa01 f100 	lsl.w	r1, r1, r0
   80b20:	400a      	ands	r2, r1
   80b22:	4291      	cmp	r1, r2
   80b24:	d012      	beq.n	80b4c <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   80b26:	f04f 0301 	mov.w	r3, #1
   80b2a:	fa03 f000 	lsl.w	r0, r3, r0
   80b2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80b32:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80b36:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80b3a:	f04f 0000 	mov.w	r0, #0
   80b3e:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80b40:	f04f 0001 	mov.w	r0, #1
   80b44:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80b46:	f04f 0000 	mov.w	r0, #0
   80b4a:	4770      	bx	lr
   80b4c:	f04f 0000 	mov.w	r0, #0
}
   80b50:	4770      	bx	lr
   80b52:	bf00      	nop

00080b54 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80b54:	e7fe      	b.n	80b54 <Dummy_Handler>
   80b56:	bf00      	nop

00080b58 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80b58:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80b5a:	f240 0300 	movw	r3, #0
   80b5e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80b62:	f241 02f4 	movw	r2, #4340	; 0x10f4
   80b66:	f2c0 0208 	movt	r2, #8
   80b6a:	429a      	cmp	r2, r3
   80b6c:	d003      	beq.n	80b76 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   80b6e:	4840      	ldr	r0, [pc, #256]	; (80c70 <Reset_Handler+0x118>)
   80b70:	4940      	ldr	r1, [pc, #256]	; (80c74 <Reset_Handler+0x11c>)
   80b72:	4281      	cmp	r1, r0
   80b74:	d304      	bcc.n	80b80 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80b76:	4b40      	ldr	r3, [pc, #256]	; (80c78 <Reset_Handler+0x120>)
   80b78:	4a40      	ldr	r2, [pc, #256]	; (80c7c <Reset_Handler+0x124>)
   80b7a:	429a      	cmp	r2, r3
   80b7c:	d325      	bcc.n	80bca <Reset_Handler+0x72>
   80b7e:	e042      	b.n	80c06 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80b80:	4d3f      	ldr	r5, [pc, #252]	; (80c80 <Reset_Handler+0x128>)
   80b82:	4c40      	ldr	r4, [pc, #256]	; (80c84 <Reset_Handler+0x12c>)
   80b84:	1b63      	subs	r3, r4, r5
   80b86:	f023 0503 	bic.w	r5, r3, #3
   80b8a:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80b8e:	f240 0200 	movw	r2, #0
   80b92:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80b96:	f241 01f4 	movw	r1, #4340	; 0x10f4
   80b9a:	f2c0 0108 	movt	r1, #8
   80b9e:	f105 0004 	add.w	r0, r5, #4
   80ba2:	f3c5 0480 	ubfx	r4, r5, #2, #1
   80ba6:	585d      	ldr	r5, [r3, r1]
   80ba8:	509d      	str	r5, [r3, r2]
   80baa:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80bae:	4283      	cmp	r3, r0
   80bb0:	d155      	bne.n	80c5e <Reset_Handler+0x106>
   80bb2:	e7e0      	b.n	80b76 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   80bb4:	585d      	ldr	r5, [r3, r1]
   80bb6:	509d      	str	r5, [r3, r2]
   80bb8:	f103 0304 	add.w	r3, r3, #4
   80bbc:	585c      	ldr	r4, [r3, r1]
   80bbe:	509c      	str	r4, [r3, r2]
   80bc0:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80bc4:	4283      	cmp	r3, r0
   80bc6:	d1f5      	bne.n	80bb4 <Reset_Handler+0x5c>
   80bc8:	e7d5      	b.n	80b76 <Reset_Handler+0x1e>
   80bca:	4d2f      	ldr	r5, [pc, #188]	; (80c88 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80bcc:	492f      	ldr	r1, [pc, #188]	; (80c8c <Reset_Handler+0x134>)
   80bce:	1b48      	subs	r0, r1, r5
   80bd0:	f020 0403 	bic.w	r4, r0, #3
   80bd4:	f240 4338 	movw	r3, #1080	; 0x438
   80bd8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80bdc:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80bde:	f04f 0100 	mov.w	r1, #0
   80be2:	1b50      	subs	r0, r2, r5
   80be4:	f1a0 0004 	sub.w	r0, r0, #4
   80be8:	f3c0 0480 	ubfx	r4, r0, #2, #1
   80bec:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80bf0:	4295      	cmp	r5, r2
   80bf2:	d12d      	bne.n	80c50 <Reset_Handler+0xf8>
   80bf4:	e007      	b.n	80c06 <Reset_Handler+0xae>
   80bf6:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   80bfa:	6069      	str	r1, [r5, #4]
   80bfc:	f105 0508 	add.w	r5, r5, #8
   80c00:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c02:	4295      	cmp	r5, r2
   80c04:	d1f7      	bne.n	80bf6 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80c06:	f240 0500 	movw	r5, #0
   80c0a:	f2c0 0508 	movt	r5, #8
   80c0e:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   80c12:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   80c16:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   80c1a:	f2ce 0000 	movt	r0, #57344	; 0xe000
   80c1e:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80c20:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   80c24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   80c28:	d207      	bcs.n	80c3a <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80c2a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   80c2e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80c32:	689d      	ldr	r5, [r3, #8]
   80c34:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   80c38:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80c3a:	f241 0131 	movw	r1, #4145	; 0x1031
   80c3e:	f2c0 0108 	movt	r1, #8
   80c42:	4788      	blx	r1

	/* Branch to main function */
	main();
   80c44:	f640 701d 	movw	r0, #3869	; 0xf1d
   80c48:	f2c0 0008 	movt	r0, #8
   80c4c:	4780      	blx	r0
   80c4e:	e7fe      	b.n	80c4e <Reset_Handler+0xf6>
   80c50:	2c00      	cmp	r4, #0
   80c52:	d0d0      	beq.n	80bf6 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80c54:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c58:	4295      	cmp	r5, r2
   80c5a:	d1cc      	bne.n	80bf6 <Reset_Handler+0x9e>
   80c5c:	e7d3      	b.n	80c06 <Reset_Handler+0xae>
   80c5e:	2c00      	cmp	r4, #0
   80c60:	d0a8      	beq.n	80bb4 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80c62:	585c      	ldr	r4, [r3, r1]
   80c64:	509c      	str	r4, [r3, r2]
   80c66:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c6a:	4283      	cmp	r3, r0
   80c6c:	d1a2      	bne.n	80bb4 <Reset_Handler+0x5c>
   80c6e:	e782      	b.n	80b76 <Reset_Handler+0x1e>
   80c70:	20070438 	.word	0x20070438
   80c74:	20070000 	.word	0x20070000
   80c78:	200705b4 	.word	0x200705b4
   80c7c:	20070438 	.word	0x20070438
   80c80:	20070004 	.word	0x20070004
   80c84:	2007043b 	.word	0x2007043b
   80c88:	20070434 	.word	0x20070434
   80c8c:	200705af 	.word	0x200705af

00080c90 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80c90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c94:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c98:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80c9a:	f000 0103 	and.w	r1, r0, #3
   80c9e:	2903      	cmp	r1, #3
   80ca0:	f200 80b1 	bhi.w	80e06 <SystemCoreClockUpdate+0x176>
   80ca4:	e8df f001 	tbb	[pc, r1]
   80ca8:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80cac:	f641 2010 	movw	r0, #6672	; 0x1a10
   80cb0:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80cb4:	6941      	ldr	r1, [r0, #20]
   80cb6:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80cba:	f240 0300 	movw	r3, #0
   80cbe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80cc2:	bf14      	ite	ne
   80cc4:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80cc8:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80ccc:	601a      	str	r2, [r3, #0]
   80cce:	e09a      	b.n	80e06 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80cd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80cd4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80cd8:	6a18      	ldr	r0, [r3, #32]
   80cda:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80cde:	d009      	beq.n	80cf4 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ce0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80ce4:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80ce8:	f240 0200 	movw	r2, #0
   80cec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80cf0:	6013      	str	r3, [r2, #0]
   80cf2:	e088      	b.n	80e06 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80cf4:	f44f 6110 	mov.w	r1, #2304	; 0x900
   80cf8:	f2c0 013d 	movt	r1, #61	; 0x3d
   80cfc:	f240 0200 	movw	r2, #0
   80d00:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80d04:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80d0a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d0e:	6a18      	ldr	r0, [r3, #32]
   80d10:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80d14:	2910      	cmp	r1, #16
   80d16:	d002      	beq.n	80d1e <SystemCoreClockUpdate+0x8e>
   80d18:	2920      	cmp	r1, #32
   80d1a:	d174      	bne.n	80e06 <SystemCoreClockUpdate+0x176>
   80d1c:	e009      	b.n	80d32 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d1e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80d22:	f2c0 007a 	movt	r0, #122	; 0x7a
   80d26:	f240 0100 	movw	r1, #0
   80d2a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d2e:	6008      	str	r0, [r1, #0]
				break;
   80d30:	e069      	b.n	80e06 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d32:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80d36:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80d3a:	f240 0200 	movw	r2, #0
   80d3e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80d42:	6013      	str	r3, [r2, #0]
				break;
   80d44:	e05f      	b.n	80e06 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d46:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80d4a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80d4e:	6a13      	ldr	r3, [r2, #32]
   80d50:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d54:	d009      	beq.n	80d6a <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d56:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80d5a:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80d5e:	f240 0200 	movw	r2, #0
   80d62:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80d66:	6011      	str	r1, [r2, #0]
   80d68:	e027      	b.n	80dba <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d6a:	f44f 6010 	mov.w	r0, #2304	; 0x900
   80d6e:	f2c0 003d 	movt	r0, #61	; 0x3d
   80d72:	f240 0100 	movw	r1, #0
   80d76:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d7a:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d7c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80d80:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80d84:	6a13      	ldr	r3, [r2, #32]
   80d86:	f003 0070 	and.w	r0, r3, #112	; 0x70
   80d8a:	2810      	cmp	r0, #16
   80d8c:	d002      	beq.n	80d94 <SystemCoreClockUpdate+0x104>
   80d8e:	2820      	cmp	r0, #32
   80d90:	d113      	bne.n	80dba <SystemCoreClockUpdate+0x12a>
   80d92:	e009      	b.n	80da8 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d94:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   80d98:	f2c0 037a 	movt	r3, #122	; 0x7a
   80d9c:	f240 0000 	movw	r0, #0
   80da0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80da4:	6003      	str	r3, [r0, #0]
				break;
   80da6:	e008      	b.n	80dba <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80da8:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80dac:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80db0:	f240 0200 	movw	r2, #0
   80db4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80db8:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80dba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80dbe:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80dc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80dc4:	f000 0103 	and.w	r1, r0, #3
   80dc8:	2902      	cmp	r1, #2
   80dca:	d113      	bne.n	80df4 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dcc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80dd0:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80dd4:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dd6:	6a89      	ldr	r1, [r1, #40]	; 0x28
   80dd8:	f240 0300 	movw	r3, #0
   80ddc:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80de0:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80de4:	681a      	ldr	r2, [r3, #0]
   80de6:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dea:	b2c9      	uxtb	r1, r1
   80dec:	fbb0 f2f1 	udiv	r2, r0, r1
   80df0:	601a      	str	r2, [r3, #0]
   80df2:	e008      	b.n	80e06 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80df4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   80df8:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   80dfc:	f240 0200 	movw	r2, #0
   80e00:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e04:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e06:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80e0a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80e0e:	6b10      	ldr	r0, [r2, #48]	; 0x30
   80e10:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80e14:	2970      	cmp	r1, #112	; 0x70
   80e16:	d10e      	bne.n	80e36 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   80e18:	f240 0300 	movw	r3, #0
   80e1c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80e20:	6818      	ldr	r0, [r3, #0]
   80e22:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   80e26:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   80e2a:	fba2 0100 	umull	r0, r1, r2, r0
   80e2e:	ea4f 0051 	mov.w	r0, r1, lsr #1
   80e32:	6018      	str	r0, [r3, #0]
   80e34:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80e36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80e3a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80e40:	f240 0000 	movw	r0, #0
   80e44:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e48:	f3c2 1102 	ubfx	r1, r2, #4, #3
   80e4c:	6803      	ldr	r3, [r0, #0]
   80e4e:	fa23 f301 	lsr.w	r3, r3, r1
   80e52:	6003      	str	r3, [r0, #0]
   80e54:	4770      	bx	lr
   80e56:	bf00      	nop

00080e58 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80e58:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   80e5c:	f2c0 1321 	movt	r3, #289	; 0x121
   80e60:	4298      	cmp	r0, r3
   80e62:	d80c      	bhi.n	80e7e <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80e64:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   80e68:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80e6c:	f04f 0000 	mov.w	r0, #0
   80e70:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   80e72:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   80e76:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80e7a:	6008      	str	r0, [r1, #0]
   80e7c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   80e7e:	f24f 017f 	movw	r1, #61567	; 0xf07f
   80e82:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   80e86:	4288      	cmp	r0, r1
   80e88:	d80c      	bhi.n	80ea4 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   80e8a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   80e8e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80e92:	f44f 7180 	mov.w	r1, #256	; 0x100
   80e96:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   80e98:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   80e9c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80ea0:	6011      	str	r1, [r2, #0]
   80ea2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   80ea4:	f648 73ff 	movw	r3, #36863	; 0x8fff
   80ea8:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   80eac:	4298      	cmp	r0, r3
   80eae:	d80c      	bhi.n	80eca <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   80eb0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   80eb4:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
   80ebc:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   80ebe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   80ec2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ec6:	601a      	str	r2, [r3, #0]
   80ec8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   80eca:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   80ece:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   80ed2:	4288      	cmp	r0, r1
   80ed4:	d80c      	bhi.n	80ef0 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   80ed6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   80eda:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ede:	f44f 7240 	mov.w	r2, #768	; 0x300
   80ee2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   80ee4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   80ee8:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80eec:	6002      	str	r2, [r0, #0]
   80eee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   80ef0:	f644 237f 	movw	r3, #19071	; 0x4a7f
   80ef4:	f2c0 535d 	movt	r3, #1373	; 0x55d
   80ef8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80efa:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   80efe:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80f02:	bf94      	ite	ls
   80f04:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   80f08:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   80f0c:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   80f0e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   80f12:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80f16:	600a      	str	r2, [r1, #0]
   80f18:	4770      	bx	lr
   80f1a:	bf00      	nop

00080f1c <main>:
 */
#include <asf.h>
#include "PWMFunctions.h"

int main (void)
{
   80f1c:	b508      	push	{r3, lr}
	sysclk_init();
   80f1e:	f240 5305 	movw	r3, #1285	; 0x505
   80f22:	f2c0 0308 	movt	r3, #8
   80f26:	4798      	blx	r3
	board_init();
   80f28:	f240 507d 	movw	r0, #1405	; 0x57d
   80f2c:	f2c0 0008 	movt	r0, #8
   80f30:	4780      	blx	r0
   80f32:	f04f 000b 	mov.w	r0, #11
   80f36:	f640 24d1 	movw	r4, #2769	; 0xad1
   80f3a:	f2c0 0408 	movt	r4, #8
   80f3e:	47a0      	blx	r4
   80f40:	f04f 000c 	mov.w	r0, #12
   80f44:	47a0      	blx	r4
   80f46:	f04f 000d 	mov.w	r0, #13
   80f4a:	47a0      	blx	r4
   80f4c:	f04f 000e 	mov.w	r0, #14
   80f50:	47a0      	blx	r4
	ioport_init();
	
	setupPWM();
   80f52:	f240 11a5 	movw	r1, #421	; 0x1a5
   80f56:	f2c0 0108 	movt	r1, #8
   80f5a:	4788      	blx	r1
	
	enablePWMPin6();
   80f5c:	f240 12e9 	movw	r2, #489	; 0x1e9
   80f60:	f2c0 0208 	movt	r2, #8
   80f64:	4790      	blx	r2
   80f66:	e7fe      	b.n	80f66 <main+0x4a>

00080f68 <__register_exitproc>:
   80f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80f6c:	4698      	mov	r8, r3
   80f6e:	4b23      	ldr	r3, [pc, #140]	; (80ffc <__register_exitproc+0x94>)
   80f70:	4606      	mov	r6, r0
   80f72:	681c      	ldr	r4, [r3, #0]
   80f74:	460f      	mov	r7, r1
   80f76:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   80f7a:	4691      	mov	r9, r2
   80f7c:	b918      	cbnz	r0, 80f86 <__register_exitproc+0x1e>
   80f7e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   80f82:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   80f86:	6841      	ldr	r1, [r0, #4]
   80f88:	291f      	cmp	r1, #31
   80f8a:	dd16      	ble.n	80fba <__register_exitproc+0x52>
   80f8c:	481c      	ldr	r0, [pc, #112]	; (81000 <__register_exitproc+0x98>)
   80f8e:	b918      	cbnz	r0, 80f98 <__register_exitproc+0x30>
   80f90:	f04f 30ff 	mov.w	r0, #4294967295
   80f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80f98:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80f9c:	f3af 8000 	nop.w
   80fa0:	2800      	cmp	r0, #0
   80fa2:	d0f5      	beq.n	80f90 <__register_exitproc+0x28>
   80fa4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   80fa8:	2500      	movs	r5, #0
   80faa:	6045      	str	r5, [r0, #4]
   80fac:	6002      	str	r2, [r0, #0]
   80fae:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   80fb2:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   80fb6:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   80fba:	b1b6      	cbz	r6, 80fea <__register_exitproc+0x82>
   80fbc:	6844      	ldr	r4, [r0, #4]
   80fbe:	2201      	movs	r2, #1
   80fc0:	fa02 f204 	lsl.w	r2, r2, r4
   80fc4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   80fc8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   80fcc:	4311      	orrs	r1, r2
   80fce:	2e02      	cmp	r6, #2
   80fd0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   80fd4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   80fd8:	461c      	mov	r4, r3
   80fda:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   80fde:	d104      	bne.n	80fea <__register_exitproc+0x82>
   80fe0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   80fe4:	431a      	orrs	r2, r3
   80fe6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   80fea:	6841      	ldr	r1, [r0, #4]
   80fec:	1c8b      	adds	r3, r1, #2
   80fee:	1c4a      	adds	r2, r1, #1
   80ff0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   80ff4:	6042      	str	r2, [r0, #4]
   80ff6:	2000      	movs	r0, #0
   80ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ffc:	000810c8 	.word	0x000810c8
   81000:	00000000 	.word	0x00000000

00081004 <__libc_fini_array>:
   81004:	b570      	push	{r4, r5, r6, lr}
   81006:	4b08      	ldr	r3, [pc, #32]	; (81028 <__libc_fini_array+0x24>)
   81008:	4c08      	ldr	r4, [pc, #32]	; (8102c <__libc_fini_array+0x28>)
   8100a:	2500      	movs	r5, #0
   8100c:	1ae0      	subs	r0, r4, r3
   8100e:	1084      	asrs	r4, r0, #2
   81010:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   81014:	3d04      	subs	r5, #4
   81016:	b11c      	cbz	r4, 81020 <__libc_fini_array+0x1c>
   81018:	5972      	ldr	r2, [r6, r5]
   8101a:	4790      	blx	r2
   8101c:	3c01      	subs	r4, #1
   8101e:	e7f9      	b.n	81014 <__libc_fini_array+0x10>
   81020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   81024:	f000 b85e 	b.w	810e4 <_fini>
   81028:	000810f0 	.word	0x000810f0
   8102c:	000810f4 	.word	0x000810f4

00081030 <__libc_init_array>:
   81030:	b538      	push	{r3, r4, r5, lr}
   81032:	4d0e      	ldr	r5, [pc, #56]	; (8106c <__libc_init_array+0x3c>)
   81034:	4b0e      	ldr	r3, [pc, #56]	; (81070 <__libc_init_array+0x40>)
   81036:	2400      	movs	r4, #0
   81038:	1ae8      	subs	r0, r5, r3
   8103a:	1085      	asrs	r5, r0, #2
   8103c:	42ac      	cmp	r4, r5
   8103e:	d005      	beq.n	8104c <__libc_init_array+0x1c>
   81040:	490b      	ldr	r1, [pc, #44]	; (81070 <__libc_init_array+0x40>)
   81042:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   81046:	4790      	blx	r2
   81048:	3401      	adds	r4, #1
   8104a:	e7f7      	b.n	8103c <__libc_init_array+0xc>
   8104c:	f000 f840 	bl	810d0 <_init>
   81050:	4908      	ldr	r1, [pc, #32]	; (81074 <__libc_init_array+0x44>)
   81052:	4a09      	ldr	r2, [pc, #36]	; (81078 <__libc_init_array+0x48>)
   81054:	1a54      	subs	r4, r2, r1
   81056:	10a5      	asrs	r5, r4, #2
   81058:	2400      	movs	r4, #0
   8105a:	42ac      	cmp	r4, r5
   8105c:	d005      	beq.n	8106a <__libc_init_array+0x3a>
   8105e:	4b05      	ldr	r3, [pc, #20]	; (81074 <__libc_init_array+0x44>)
   81060:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   81064:	4780      	blx	r0
   81066:	3401      	adds	r4, #1
   81068:	e7f7      	b.n	8105a <__libc_init_array+0x2a>
   8106a:	bd38      	pop	{r3, r4, r5, pc}
   8106c:	000810dc 	.word	0x000810dc
   81070:	000810dc 	.word	0x000810dc
   81074:	000810dc 	.word	0x000810dc
   81078:	000810e4 	.word	0x000810e4

0008107c <register_fini>:
   8107c:	4b02      	ldr	r3, [pc, #8]	; (81088 <register_fini+0xc>)
   8107e:	b113      	cbz	r3, 81086 <register_fini+0xa>
   81080:	4802      	ldr	r0, [pc, #8]	; (8108c <register_fini+0x10>)
   81082:	f000 b805 	b.w	81090 <atexit>
   81086:	4770      	bx	lr
   81088:	00000000 	.word	0x00000000
   8108c:	00081005 	.word	0x00081005

00081090 <atexit>:
   81090:	4601      	mov	r1, r0
   81092:	2000      	movs	r0, #0
   81094:	4602      	mov	r2, r0
   81096:	4603      	mov	r3, r0
   81098:	f7ff bf66 	b.w	80f68 <__register_exitproc>
   8109c:	00000001 	.word	0x00000001
   810a0:	00000002 	.word	0x00000002
   810a4:	00000004 	.word	0x00000004
   810a8:	00000008 	.word	0x00000008
   810ac:	00000010 	.word	0x00000010
   810b0:	00000020 	.word	0x00000020
   810b4:	00000040 	.word	0x00000040
   810b8:	00000080 	.word	0x00000080
   810bc:	00000100 	.word	0x00000100
   810c0:	00000200 	.word	0x00000200
   810c4:	00000400 	.word	0x00000400

000810c8 <_global_impure_ptr>:
   810c8:	20070010 00000043                       ... C...

000810d0 <_init>:
   810d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   810d2:	bf00      	nop
   810d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   810d6:	bc08      	pop	{r3}
   810d8:	469e      	mov	lr, r3
   810da:	4770      	bx	lr

000810dc <__init_array_start>:
   810dc:	0008107d 	.word	0x0008107d

000810e0 <__frame_dummy_init_array_entry>:
   810e0:	0008016d                                m...

000810e4 <_fini>:
   810e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   810e6:	bf00      	nop
   810e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   810ea:	bc08      	pop	{r3}
   810ec:	469e      	mov	lr, r3
   810ee:	4770      	bx	lr

000810f0 <__fini_array_start>:
   810f0:	00080145 	.word	0x00080145
